package ru.davidlevi.GoF.behavioral.i9_strategy.simple1;

import ru.davidlevi.GoF.behavioral.i9_strategy.simple1.context.User;
import ru.davidlevi.GoF.behavioral.i9_strategy.simple1.strategy.DatabaseAuth;
import ru.davidlevi.GoF.behavioral.i9_strategy.simple1.strategy.FileAuth;

import java.io.File;

/**
 * Паттерн StrategyCalculate (Стратегия)
 * <p>
 * Назначение:
 * - предназначенный для определения семейства алгоритмов, инкапсуляции каждого из них и обеспечения их
 * взаимозаменяемости. Это позволяет выбирать алгоритм путём определения соответствующего класса. Шаблон StrategyCalculate
 * позволяет менять выбранный алгоритм независимо от объектов-клиентов, которые его используют.
 * Назначение:
 * - позволяет использовать различные бизнес-правила или алгоритмы в зависимости от контекста.
 * Применение:
 * - когда в одном и том же месте в зависимости от текущего состояния системы (или её окружения) должны использоваться
 * различные алгоритмы.
 * Плюсы:
 * - инкапсуляция реализации различных алгоритмов, система становится независимой от возможных изменений бизнес-правил;
 * - вызов всех алгоритмов одним стандартным образом;
 * - отказ от использования переключателей и/или условных операторов.
 * Минусы:
 * - создание дополнительных классов.
 * Примечание:
 * - родственные шаблоны: Мост, Шаблонный метод, Адаптер
 */
public class MainClass {
    public static void main(String[] args) {
        // Некий пользователь
        User user = new User();

        // Проверить пользователя через разные стратегии аутентификации
        user.check(new DatabaseAuth("jdbc://localhost:3306/database?param1=100A"));
        user.check(new FileAuth(new File("c:\\file.txt")));
    }
}
